name: Deployment

on:
  push:
    branches:
      - main

jobs:
  increment-version:
    runs-on: ubuntu-latest
    outputs:
      NEW_VERSION: ${{ steps.increment-version.outputs.NEW_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true


      - name: Increment Version
        id: increment-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0)
          if [[ -z "$latest_tag" ]]; then
            new_version="v0.0.1"
          else
            new_version=$(echo "$latest_tag" | awk -F. '{$NF=$NF+1;print $0}' | sed 's/ /./g' | sed 's/^/v/')
          fi
          git tag $new_version
          git push origin $new_version
          echo "NEW_VERSION=$($new_version)" >> "$GITHUB_OUTPUT"


  build-docker-image:
    runs-on: ubuntu-latest
    needs: increment-version
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Publish Docker Images
        env:
          NEW_VERSION: ${{ needs.increment-version.outputs.NEW_VERSION }}
        run: |-
          echo "Building and publishing Docker images"
          echo "New version: $NEW_VERSION"
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      
          echo "Global Backend"        
          docker build -t ${{ vars.DOCKER_IMAGE_GLOBAL }}:$NEW_VERSION .
          docker push ${{ vars.DOCKER_IMAGE_GLOBAL }}:$NEW_VERSION
          
          echo "Regional Backend"
          docker build -t ${{ vars.DOCKER_IMAGE_REGIONAL }}:$NEW_VERSION .
          docker push ${{ vars.DOCKER_IMAGE_REGIONAL }}:$NEW_VERSION

  update-gitops-repository:
    runs-on: ubuntu-latest
    needs:
      - increment-version
      - build-docker-image
    steps:
      - name: Install Kustomize
        run: |-
          echo "Installing Kustomize"
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin/
      - name: Clone GitOps Repository
        uses: actions/checkout@v3
        with:
          repository: ${{ vars.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_TOKEN }}
          fetch-depth: 0
          persist-credentials: true
      - name: Update GitOps Repository Global
        env:
          NEW_VERSION: ${{ needs.increment-version.outputs.NEW_VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITOPS_TOKEN }}
        run: |-

          echo "New global version: $NEW_VERSION"
          cd ${{ vars.GITOPS_VERSION_FOLDER_GLOBAL }}
          kustomize edit set image ${{ vars.DOCKER_IMAGE_GLOBAL }}:$NEW_VERSION
          cat "kustomization.yaml"

          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add .
          git commit -m "Update image ${{ vars.DOCKER_IMAGE_GLOBAL }} to version $NEW_VERSION"
          git push

      - name: Update GitOps Repository Regional
        env:
          NEW_VERSION: ${{ needs.increment-version.outputs.NEW_VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITOPS_TOKEN }}
        run: |-

          echo "New regional version: $NEW_VERSION"
          cd ${{ vars.GITOPS_VERSION_FOLDER_REGIONAL }}
          kustomize edit set image ${{ vars.DOCKER_IMAGE_REGIONAL }}:$NEW_VERSION
          cat "kustomization.yaml"

          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add .
          git commit -m "Update image ${{ vars.DOCKER_IMAGE_REGIONAL }} to version $NEW_VERSION"
          git push
